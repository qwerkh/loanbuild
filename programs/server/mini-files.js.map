{"version":3,"mappings":"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","names":["module","export","isWindowsLikeFilesystem","toPosixPath","convertToPosixPath","toDosPath","convertToWindowsPath","convertToOSPath","convertToStandardPath","convertToOSLineEndings","convertToStandardLineEndings","unicodeNormalizePath","wrapPathFunction","pathJoin","pathNormalize","pathRelative","pathResolve","pathDirname","pathBasename","pathExtname","pathIsAbsolute","pathSep","pathDelimiter","pathOsDelimiter","default","path","release","EOL","process","platform","toLowerCase","includes","p","partialPath","env","SystemDrive","replace","slice","test","Error","standardPath","osPath","fileContents","RegExp","normalize","f","wrapper","result","apply","Array","prototype","map","call","arguments","join","relative","resolve","dirname","basename","extname","isAbsolute","delimiter"],"sourceRoot":"","sources":["tools/static-assets/server/mini-files.ts"],"sourcesContent":["import path from \"path\";\nimport { release, EOL } from \"os\";\n\n// All of these functions are attached to files.js for the tool;\n// they live here because we need them in boot.js as well to avoid duplicating\n// a lot of the code.\n//\n// Note that this file does NOT contain any of the \"perform I/O maybe\n// synchronously\" functions from files.js; this is intentional, because we want\n// to make it very hard to accidentally use fs.*Sync functions in the app server\n// after bootup (since they block all concurrency!)\n\n// Detect that we are on a Windows-like Filesystem, such as that in a WSL\n// (Windows Subsystem for Linux) even if it otherwise looks like we're on Unix.\n// https://github.com/Microsoft/BashOnWindows/issues/423#issuecomment-221627364\nexport function isWindowsLikeFilesystem() {\n  return process.platform === \"win32\" || release().toLowerCase().includes(\"microsoft\");\n}\n\nexport function toPosixPath(p: string, partialPath: boolean = false) {\n  // Sometimes, you can have a path like \\Users\\IEUser on windows, and this\n  // actually means you want C:\\Users\\IEUser\n  if (p[0] === \"\\\\\" && (! partialPath)) {\n    p = process.env.SystemDrive + p;\n  }\n\n  p = p.replace(/\\\\/g, '/');\n  if (p[1] === ':' && ! partialPath) {\n    // transform \"C:/bla/bla\" to \"/c/bla/bla\"\n    p = '/' + p[0] + p.slice(2);\n  }\n\n  return p;\n}\n\nexport const convertToPosixPath = toPosixPath;\n\nexport function toDosPath(p: string, partialPath: boolean = false) {\n  if (p[0] === '/' && ! partialPath) {\n    if (! /^\\/[A-Za-z](\\/|$)/.test(p))\n      throw new Error(\"Surprising path: \" + p);\n    // transform a previously windows path back\n    // \"/C/something\" to \"c:/something\"\n    p = p[1] + \":\" + p.slice(2);\n  }\n\n  p = p.replace(/\\//g, '\\\\');\n  return p;\n}\n\nexport const convertToWindowsPath = toDosPath;\n\nexport function convertToOSPath(standardPath: string, partialPath: boolean = false) {\n  if (process.platform === \"win32\") {\n    return toDosPath(standardPath, partialPath);\n  }\n  return standardPath;\n}\n\nexport function convertToStandardPath(osPath: string, partialPath: boolean = false) {\n  if (process.platform === \"win32\") {\n    return toPosixPath(osPath, partialPath);\n  }\n  return osPath;\n}\n\nexport function convertToOSLineEndings(fileContents: string) {\n  return fileContents.replace(/\\n/g, EOL);\n}\n\nexport function convertToStandardLineEndings(fileContents: string) {\n  // Convert all kinds of end-of-line chars to linuxy \"\\n\".\n  return fileContents.replace(new RegExp(\"\\r\\n\", \"g\"), \"\\n\")\n                     .replace(new RegExp(\"\\r\", \"g\"), \"\\n\");\n}\n\n\n// Return the Unicode Normalization Form of the passed in path string, using\n// \"Normalization Form Canonical Composition\"\nexport function unicodeNormalizePath(path: string) {\n  return (path) ? path.normalize('NFC') : path;\n}\n\n// wrappings for path functions that always run as they were on unix (using\n// forward slashes)\nexport function wrapPathFunction<\n  TArgs extends any[],\n  TResult,\n  F extends (...args: TArgs) => TResult,\n>(\n  f: F,\n  partialPath: boolean = false,\n): F {\n  return function wrapper() {\n    if (process.platform === 'win32') {\n      const result = f.apply(path, Array.prototype.map.call(\n        arguments,\n        // if partialPaths is turned on (for path.join mostly)\n        // forget about conversion of absolute paths for Windows\n        p => toDosPath(p, partialPath),\n      ) as TArgs);\n\n      return typeof result === \"string\"\n        ? toPosixPath(result, partialPath)\n        : result;\n    }\n    return f.apply(path, arguments as any);\n  } as F;\n}\n\nexport const pathJoin = wrapPathFunction(path.join, true);\nexport const pathNormalize = wrapPathFunction(path.normalize);\nexport const pathRelative = wrapPathFunction(path.relative);\nexport const pathResolve = wrapPathFunction(path.resolve);\nexport const pathDirname = wrapPathFunction(path.dirname);\nexport const pathBasename = wrapPathFunction(path.basename);\nexport const pathExtname = wrapPathFunction(path.extname);\nexport const pathIsAbsolute = wrapPathFunction(path.isAbsolute);\nexport const pathSep = '/';\nexport const pathDelimiter = ':';\nexport const pathOsDelimiter = path.delimiter;\n"],"file":"tools/static-assets/server/mini-files.js.map"}