{"version":3,"sources":["meteor://ðŸ’»app/packages/tmeasday:check-npm-versions/check-npm-versions.ts"],"names":["module1","checkNpmVersions","Meteor","default","semver","compatibleVersionIsInstalled","name","range","installedVersion","require","version","satisfies","e","message","toString","includes","packages","packageName","isDevelopment","failures","Object","keys","forEach","failure","length","errors","installed","requirement","push","qualifier","console","warn","join"],"mappings":";;;;;;;;;;;;;;;;;;AAAAA,SAAO,OAAP,CAAe;AAAAC,oBAAQ;AAAR,GAAf;AAAuC;AAAAD;AAAAE;AAAAA;AAAA;;AAAA;AAAA;AAAAF;AAAAG;AAAAC;AAAA;;AAAA;;AAavC;AACA;AACA;AACA;AACA,QAAMC,4BAA4B,GAAG,CAACC,IAAD,EAAeC,KAAf,KAA6D;AAChG,QAAI;AACF,YAAMC,gBAAgB,GAAGC,OAAO,WAAIH,IAAJ,mBAAP,CAAgCI,OAAzD;;AACA,UAAIN,MAAM,CAACO,SAAP,CAAiBH,gBAAjB,EAAmCD,KAAnC,CAAJ,EAA+C;AAC7C,eAAO,IAAP;AACD,OAFD,MAEO;AACL,eAAOC,gBAAP;AACD;AACF,KAPD,CAOE,OAAOI,CAAP,EAAU;AACV;AACA,YAAMC,OAAO,GAAGD,CAAC,CAACE,QAAF,EAAhB,CAFU,CAGV;;AACA,UAAID,OAAO,CAACE,QAAR,CAAiB,oBAAjB,MAA2C,IAA3C,IAAmDF,OAAO,CAACE,QAAR,CAAiB,uBAAjB,MAA8C,IAArG,EAA2G;AACzG,eAAO,KAAP;AACD,OAFD,MAEO;AACL,cAAMH,CAAN;AACD;AACF;AACF,GAlBD;;AAoBO,QAAMX,gBAAgB,GAAG,CAACe,QAAD,EAAqBC,WAArB,KAAkD;AAChF,QAAIf,MAAM,CAACgB,aAAX,EAA0B;AACxB,YAAMC,QAAQ,GAAsB,EAApC;AAEAC,YAAM,CAACC,IAAP,CAAYL,QAAZ,EAAsBM,OAAtB,CAA+BhB,IAAD,IAAS;AACrC,cAAMC,KAAK,GAAGS,QAAQ,CAACV,IAAD,CAAtB;AACA,cAAMiB,OAAO,GAAGlB,4BAA4B,CAACC,IAAD,EAAOC,KAAP,CAA5C;;AAEA,YAAIgB,OAAO,KAAK,IAAhB,EAAsB;AACpBJ,kBAAQ,CAACb,IAAD,CAAR,GAAiBiB,OAAjB;AACD;AACF,OAPD;;AASA,UAAIH,MAAM,CAACC,IAAP,CAAYF,QAAZ,EAAsBK,MAAtB,KAAiC,CAArC,EAAwC;AACtC;AACD;;AAED,YAAMC,MAAM,GAAa,EAAzB;AAEAL,YAAM,CAACC,IAAP,CAAYF,QAAZ,EAAsBG,OAAtB,CAA+BhB,IAAD,IAAS;AACrC,cAAMoB,SAAS,GAAGP,QAAQ,CAACb,IAAD,CAA1B;AACA,cAAMqB,WAAW,aAAMrB,IAAN,cAAcU,QAAQ,CAACV,IAAD,CAAtB,CAAjB;;AAEA,YAAIoB,SAAJ,EAAe;AACbD,gBAAM,CAACG,IAAP,cAAkBtB,IAAlB,cAA0BoB,SAA1B,yBAAkDC,WAAlD;AACD,SAFD,MAEO;AACLF,gBAAM,CAACG,IAAP,cAAkBtB,IAAlB,cAA0BU,QAAQ,CAACV,IAAD,CAAlC;AACD;AACF,OATD;AAWA,YAAMuB,SAAS,GAAGZ,WAAW,kBAAWA,WAAX,UAA6B,EAA1D;AACAa,aAAO,CAACC,IAAR,0CAA+CF,SAA/C,+BACAJ,MAAM,CAACO,IAAP,CAAY,IAAZ,CADA;AAMD;AACF,GAtCM","file":"/packages/tmeasday_check-npm-versions.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport semver from 'semver';\n\ntype boolOrString = boolean | string;\n\ninterface indexBoolorString {\n  [key: string]: boolOrString\n}\n\ninterface indexAny {\n  [key: string]: any\n}\n\n// Returns:\n//   - true      if a version of the package in the range is installed\n//   - false     if no version is installed\n//   - version#  if incompatible version is installed\nconst compatibleVersionIsInstalled = (name: string, range: string | semver.Range): boolOrString => {\n  try {\n    const installedVersion = require(`${name}/package.json`).version;\n    if (semver.satisfies(installedVersion, range)) {\n      return true;\n    } else {\n      return installedVersion;\n    }\n  } catch (e) {\n    // XXX add something to the tool to make this more reliable\n    const message = e.toString();\n    // One message comes out of the install npm package the other from npm directly\n    if (message.includes('Cannot find module') === true || message.includes(\"Can't find npm module\") === true) {\n      return false;\n    } else {\n      throw e;\n    }\n  }\n};\n\nexport const checkNpmVersions = (packages: indexAny, packageName: string): void => {\n  if (Meteor.isDevelopment) {\n    const failures: indexBoolorString = {};\n\n    Object.keys(packages).forEach((name) => {\n      const range = packages[name];\n      const failure = compatibleVersionIsInstalled(name, range);\n\n      if (failure !== true) {\n        failures[name] = failure;\n      }\n    });\n\n    if (Object.keys(failures).length === 0) {\n      return;\n    }\n\n    const errors: string[] = [];\n\n    Object.keys(failures).forEach((name) => {\n      const installed = failures[name];\n      const requirement = `${name}@${packages[name]}`;\n\n      if (installed) {\n        errors.push(` - ${name}@${installed} installed, ${requirement} needed`);\n      } else {\n        errors.push(` - ${name}@${packages[name]} not installed.`);\n      }\n    });\n\n    const qualifier = packageName ? `(for ${packageName}) ` : '';\n    console.warn(`WARNING: npm peer requirements ${qualifier}not installed:\n  ${errors.join('\\n')}\n\n  Read more about installing npm peer dependencies:\n    http://guide.meteor.com/using-packages.html#peer-npm-dependencies\n  `);\n  }\n};\n"]}